// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/interfaces.go
//
// Generated by this command:
//
//	mockgen -source ./internal/usecase/interfaces.go -package usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	entity "github.com/idoyudha/eshop-warehouse/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockWarehouseRankRedisRepo is a mock of WarehouseRankRedisRepo interface.
type MockWarehouseRankRedisRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseRankRedisRepoMockRecorder
	isgomock struct{}
}

// MockWarehouseRankRedisRepoMockRecorder is the mock recorder for MockWarehouseRankRedisRepo.
type MockWarehouseRankRedisRepoMockRecorder struct {
	mock *MockWarehouseRankRedisRepo
}

// NewMockWarehouseRankRedisRepo creates a new mock instance.
func NewMockWarehouseRankRedisRepo(ctrl *gomock.Controller) *MockWarehouseRankRedisRepo {
	mock := &MockWarehouseRankRedisRepo{ctrl: ctrl}
	mock.recorder = &MockWarehouseRankRedisRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouseRankRedisRepo) EXPECT() *MockWarehouseRankRedisRepoMockRecorder {
	return m.recorder
}

// GetNearestWarehouses mocks base method.
func (m *MockWarehouseRankRedisRepo) GetNearestWarehouses(arg0 context.Context, arg1 string) ([]entity.WarehouseDistance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearestWarehouses", arg0, arg1)
	ret0, _ := ret[0].([]entity.WarehouseDistance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearestWarehouses indicates an expected call of GetNearestWarehouses.
func (mr *MockWarehouseRankRedisRepoMockRecorder) GetNearestWarehouses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearestWarehouses", reflect.TypeOf((*MockWarehouseRankRedisRepo)(nil).GetNearestWarehouses), arg0, arg1)
}

// UpdateWarehouseRanks mocks base method.
func (m *MockWarehouseRankRedisRepo) UpdateWarehouseRanks(arg0 context.Context, arg1, arg2 string, arg3 map[string]float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWarehouseRanks", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWarehouseRanks indicates an expected call of UpdateWarehouseRanks.
func (mr *MockWarehouseRankRedisRepoMockRecorder) UpdateWarehouseRanks(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWarehouseRanks", reflect.TypeOf((*MockWarehouseRankRedisRepo)(nil).UpdateWarehouseRanks), arg0, arg1, arg2, arg3)
}

// MockWarehousePostgreRepo is a mock of WarehousePostgreRepo interface.
type MockWarehousePostgreRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWarehousePostgreRepoMockRecorder
	isgomock struct{}
}

// MockWarehousePostgreRepoMockRecorder is the mock recorder for MockWarehousePostgreRepo.
type MockWarehousePostgreRepoMockRecorder struct {
	mock *MockWarehousePostgreRepo
}

// NewMockWarehousePostgreRepo creates a new mock instance.
func NewMockWarehousePostgreRepo(ctrl *gomock.Controller) *MockWarehousePostgreRepo {
	mock := &MockWarehousePostgreRepo{ctrl: ctrl}
	mock.recorder = &MockWarehousePostgreRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehousePostgreRepo) EXPECT() *MockWarehousePostgreRepoMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockWarehousePostgreRepo) GetAll(arg0 context.Context) ([]*entity.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*entity.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockWarehousePostgreRepoMockRecorder) GetAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockWarehousePostgreRepo)(nil).GetAll), arg0)
}

// GetAllExceptMain mocks base method.
func (m *MockWarehousePostgreRepo) GetAllExceptMain(arg0 context.Context) ([]*entity.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllExceptMain", arg0)
	ret0, _ := ret[0].([]*entity.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllExceptMain indicates an expected call of GetAllExceptMain.
func (mr *MockWarehousePostgreRepoMockRecorder) GetAllExceptMain(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllExceptMain", reflect.TypeOf((*MockWarehousePostgreRepo)(nil).GetAllExceptMain), arg0)
}

// GetAllIDAndZipCode mocks base method.
func (m *MockWarehousePostgreRepo) GetAllIDAndZipCode(arg0 context.Context) ([]*entity.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllIDAndZipCode", arg0)
	ret0, _ := ret[0].([]*entity.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllIDAndZipCode indicates an expected call of GetAllIDAndZipCode.
func (mr *MockWarehousePostgreRepoMockRecorder) GetAllIDAndZipCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIDAndZipCode", reflect.TypeOf((*MockWarehousePostgreRepo)(nil).GetAllIDAndZipCode), arg0)
}

// GetByID mocks base method.
func (m *MockWarehousePostgreRepo) GetByID(arg0 context.Context, arg1 uuid.UUID) (*entity.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockWarehousePostgreRepoMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockWarehousePostgreRepo)(nil).GetByID), arg0, arg1)
}

// GetMainID mocks base method.
func (m *MockWarehousePostgreRepo) GetMainID(arg0 context.Context) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainID", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMainID indicates an expected call of GetMainID.
func (mr *MockWarehousePostgreRepoMockRecorder) GetMainID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainID", reflect.TypeOf((*MockWarehousePostgreRepo)(nil).GetMainID), arg0)
}

// Save mocks base method.
func (m *MockWarehousePostgreRepo) Save(arg0 context.Context, arg1 *entity.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockWarehousePostgreRepoMockRecorder) Save(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockWarehousePostgreRepo)(nil).Save), arg0, arg1)
}

// Update mocks base method.
func (m *MockWarehousePostgreRepo) Update(arg0 context.Context, arg1 *entity.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWarehousePostgreRepoMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWarehousePostgreRepo)(nil).Update), arg0, arg1)
}

// MockWarehouseProductPostgreRepo is a mock of WarehouseProductPostgreRepo interface.
type MockWarehouseProductPostgreRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseProductPostgreRepoMockRecorder
	isgomock struct{}
}

// MockWarehouseProductPostgreRepoMockRecorder is the mock recorder for MockWarehouseProductPostgreRepo.
type MockWarehouseProductPostgreRepoMockRecorder struct {
	mock *MockWarehouseProductPostgreRepo
}

// NewMockWarehouseProductPostgreRepo creates a new mock instance.
func NewMockWarehouseProductPostgreRepo(ctrl *gomock.Controller) *MockWarehouseProductPostgreRepo {
	mock := &MockWarehouseProductPostgreRepo{ctrl: ctrl}
	mock.recorder = &MockWarehouseProductPostgreRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouseProductPostgreRepo) EXPECT() *MockWarehouseProductPostgreRepoMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockWarehouseProductPostgreRepo) GetAll(arg0 context.Context) ([]*entity.WarehouseProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*entity.WarehouseProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockWarehouseProductPostgreRepoMockRecorder) GetAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockWarehouseProductPostgreRepo)(nil).GetAll), arg0)
}

// GetByProductID mocks base method.
func (m *MockWarehouseProductPostgreRepo) GetByProductID(arg0 context.Context, arg1 uuid.UUID) ([]*entity.WarehouseProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProductID", arg0, arg1)
	ret0, _ := ret[0].([]*entity.WarehouseProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProductID indicates an expected call of GetByProductID.
func (mr *MockWarehouseProductPostgreRepoMockRecorder) GetByProductID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProductID", reflect.TypeOf((*MockWarehouseProductPostgreRepo)(nil).GetByProductID), arg0, arg1)
}

// GetByProductIDAndWarehouseID mocks base method.
func (m *MockWarehouseProductPostgreRepo) GetByProductIDAndWarehouseID(arg0 context.Context, arg1, arg2 uuid.UUID) (*entity.WarehouseProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProductIDAndWarehouseID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.WarehouseProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProductIDAndWarehouseID indicates an expected call of GetByProductIDAndWarehouseID.
func (mr *MockWarehouseProductPostgreRepoMockRecorder) GetByProductIDAndWarehouseID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProductIDAndWarehouseID", reflect.TypeOf((*MockWarehouseProductPostgreRepo)(nil).GetByProductIDAndWarehouseID), arg0, arg1, arg2)
}

// GetByWarehouseID mocks base method.
func (m *MockWarehouseProductPostgreRepo) GetByWarehouseID(arg0 context.Context, arg1 uuid.UUID) ([]*entity.WarehouseProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByWarehouseID", arg0, arg1)
	ret0, _ := ret[0].([]*entity.WarehouseProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByWarehouseID indicates an expected call of GetByWarehouseID.
func (mr *MockWarehouseProductPostgreRepoMockRecorder) GetByWarehouseID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByWarehouseID", reflect.TypeOf((*MockWarehouseProductPostgreRepo)(nil).GetByWarehouseID), arg0, arg1)
}

// GetTotalQuantityOfProductInAllWarehouse mocks base method.
func (m *MockWarehouseProductPostgreRepo) GetTotalQuantityOfProductInAllWarehouse(arg0 context.Context, arg1 uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalQuantityOfProductInAllWarehouse", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalQuantityOfProductInAllWarehouse indicates an expected call of GetTotalQuantityOfProductInAllWarehouse.
func (mr *MockWarehouseProductPostgreRepoMockRecorder) GetTotalQuantityOfProductInAllWarehouse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalQuantityOfProductInAllWarehouse", reflect.TypeOf((*MockWarehouseProductPostgreRepo)(nil).GetTotalQuantityOfProductInAllWarehouse), arg0, arg1)
}

// GetWarehouseIDZipCodeAndQtyByProductID mocks base method.
func (m *MockWarehouseProductPostgreRepo) GetWarehouseIDZipCodeAndQtyByProductID(arg0 context.Context, arg1 uuid.UUID) ([]*entity.WarehouseAddressAndProductQty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarehouseIDZipCodeAndQtyByProductID", arg0, arg1)
	ret0, _ := ret[0].([]*entity.WarehouseAddressAndProductQty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarehouseIDZipCodeAndQtyByProductID indicates an expected call of GetWarehouseIDZipCodeAndQtyByProductID.
func (mr *MockWarehouseProductPostgreRepoMockRecorder) GetWarehouseIDZipCodeAndQtyByProductID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarehouseIDZipCodeAndQtyByProductID", reflect.TypeOf((*MockWarehouseProductPostgreRepo)(nil).GetWarehouseIDZipCodeAndQtyByProductID), arg0, arg1)
}

// Save mocks base method.
func (m *MockWarehouseProductPostgreRepo) Save(arg0 context.Context, arg1 *entity.WarehouseProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockWarehouseProductPostgreRepoMockRecorder) Save(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockWarehouseProductPostgreRepo)(nil).Save), arg0, arg1)
}

// Update mocks base method.
func (m *MockWarehouseProductPostgreRepo) Update(arg0 context.Context, arg1 *entity.WarehouseProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWarehouseProductPostgreRepoMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWarehouseProductPostgreRepo)(nil).Update), arg0, arg1)
}

// UpdateProductQuantity mocks base method.
func (m *MockWarehouseProductPostgreRepo) UpdateProductQuantity(arg0 context.Context, arg1 *entity.WarehouseProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductQuantity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductQuantity indicates an expected call of UpdateProductQuantity.
func (mr *MockWarehouseProductPostgreRepoMockRecorder) UpdateProductQuantity(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductQuantity", reflect.TypeOf((*MockWarehouseProductPostgreRepo)(nil).UpdateProductQuantity), arg0, arg1)
}

// MockStockMovementPostgreRepo is a mock of StockMovementPostgreRepo interface.
type MockStockMovementPostgreRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStockMovementPostgreRepoMockRecorder
	isgomock struct{}
}

// MockStockMovementPostgreRepoMockRecorder is the mock recorder for MockStockMovementPostgreRepo.
type MockStockMovementPostgreRepoMockRecorder struct {
	mock *MockStockMovementPostgreRepo
}

// NewMockStockMovementPostgreRepo creates a new mock instance.
func NewMockStockMovementPostgreRepo(ctrl *gomock.Controller) *MockStockMovementPostgreRepo {
	mock := &MockStockMovementPostgreRepo{ctrl: ctrl}
	mock.recorder = &MockStockMovementPostgreRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStockMovementPostgreRepo) EXPECT() *MockStockMovementPostgreRepoMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockStockMovementPostgreRepo) GetAll(ctx context.Context) ([]*entity.StockMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*entity.StockMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStockMovementPostgreRepoMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStockMovementPostgreRepo)(nil).GetAll), ctx)
}

// GetByDestinationID mocks base method.
func (m *MockStockMovementPostgreRepo) GetByDestinationID(arg0 context.Context, arg1 uuid.UUID) ([]*entity.StockMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDestinationID", arg0, arg1)
	ret0, _ := ret[0].([]*entity.StockMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDestinationID indicates an expected call of GetByDestinationID.
func (mr *MockStockMovementPostgreRepoMockRecorder) GetByDestinationID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDestinationID", reflect.TypeOf((*MockStockMovementPostgreRepo)(nil).GetByDestinationID), arg0, arg1)
}

// GetByProductID mocks base method.
func (m *MockStockMovementPostgreRepo) GetByProductID(arg0 context.Context, arg1 uuid.UUID) ([]*entity.StockMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProductID", arg0, arg1)
	ret0, _ := ret[0].([]*entity.StockMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProductID indicates an expected call of GetByProductID.
func (mr *MockStockMovementPostgreRepoMockRecorder) GetByProductID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProductID", reflect.TypeOf((*MockStockMovementPostgreRepo)(nil).GetByProductID), arg0, arg1)
}

// GetBySourceID mocks base method.
func (m *MockStockMovementPostgreRepo) GetBySourceID(arg0 context.Context, arg1 uuid.UUID) ([]*entity.StockMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySourceID", arg0, arg1)
	ret0, _ := ret[0].([]*entity.StockMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySourceID indicates an expected call of GetBySourceID.
func (mr *MockStockMovementPostgreRepoMockRecorder) GetBySourceID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySourceID", reflect.TypeOf((*MockStockMovementPostgreRepo)(nil).GetBySourceID), arg0, arg1)
}

// MockTransactionProductPostgresRepo is a mock of TransactionProductPostgresRepo interface.
type MockTransactionProductPostgresRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionProductPostgresRepoMockRecorder
	isgomock struct{}
}

// MockTransactionProductPostgresRepoMockRecorder is the mock recorder for MockTransactionProductPostgresRepo.
type MockTransactionProductPostgresRepoMockRecorder struct {
	mock *MockTransactionProductPostgresRepo
}

// NewMockTransactionProductPostgresRepo creates a new mock instance.
func NewMockTransactionProductPostgresRepo(ctrl *gomock.Controller) *MockTransactionProductPostgresRepo {
	mock := &MockTransactionProductPostgresRepo{ctrl: ctrl}
	mock.recorder = &MockTransactionProductPostgresRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionProductPostgresRepo) EXPECT() *MockTransactionProductPostgresRepoMockRecorder {
	return m.recorder
}

// TransferIn mocks base method.
func (m *MockTransactionProductPostgresRepo) TransferIn(arg0 context.Context, arg1 *entity.StockMovement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferIn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferIn indicates an expected call of TransferIn.
func (mr *MockTransactionProductPostgresRepoMockRecorder) TransferIn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferIn", reflect.TypeOf((*MockTransactionProductPostgresRepo)(nil).TransferIn), arg0, arg1)
}

// TransferOut mocks base method.
func (m *MockTransactionProductPostgresRepo) TransferOut(arg0 context.Context, arg1 []*entity.StockMovement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferOut", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferOut indicates an expected call of TransferOut.
func (mr *MockTransactionProductPostgresRepoMockRecorder) TransferOut(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferOut", reflect.TypeOf((*MockTransactionProductPostgresRepo)(nil).TransferOut), arg0, arg1)
}

// MockWarehouse is a mock of Warehouse interface.
type MockWarehouse struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseMockRecorder
	isgomock struct{}
}

// MockWarehouseMockRecorder is the mock recorder for MockWarehouse.
type MockWarehouseMockRecorder struct {
	mock *MockWarehouse
}

// NewMockWarehouse creates a new mock instance.
func NewMockWarehouse(ctrl *gomock.Controller) *MockWarehouse {
	mock := &MockWarehouse{ctrl: ctrl}
	mock.recorder = &MockWarehouseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouse) EXPECT() *MockWarehouseMockRecorder {
	return m.recorder
}

// CreateWarehouse mocks base method.
func (m *MockWarehouse) CreateWarehouse(arg0 context.Context, arg1 *entity.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWarehouse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWarehouse indicates an expected call of CreateWarehouse.
func (mr *MockWarehouseMockRecorder) CreateWarehouse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWarehouse", reflect.TypeOf((*MockWarehouse)(nil).CreateWarehouse), arg0, arg1)
}

// GetAllWarehouses mocks base method.
func (m *MockWarehouse) GetAllWarehouses(arg0 context.Context) ([]*entity.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWarehouses", arg0)
	ret0, _ := ret[0].([]*entity.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWarehouses indicates an expected call of GetAllWarehouses.
func (mr *MockWarehouseMockRecorder) GetAllWarehouses(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWarehouses", reflect.TypeOf((*MockWarehouse)(nil).GetAllWarehouses), arg0)
}

// GetMainIDWarehouse mocks base method.
func (m *MockWarehouse) GetMainIDWarehouse(arg0 context.Context) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainIDWarehouse", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMainIDWarehouse indicates an expected call of GetMainIDWarehouse.
func (mr *MockWarehouseMockRecorder) GetMainIDWarehouse(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainIDWarehouse", reflect.TypeOf((*MockWarehouse)(nil).GetMainIDWarehouse), arg0)
}

// GetNearestWarehouse mocks base method.
func (m *MockWarehouse) GetNearestWarehouse(arg0 context.Context, arg1 []string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearestWarehouse", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearestWarehouse indicates an expected call of GetNearestWarehouse.
func (mr *MockWarehouseMockRecorder) GetNearestWarehouse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearestWarehouse", reflect.TypeOf((*MockWarehouse)(nil).GetNearestWarehouse), arg0, arg1)
}

// GetWarehouseByID mocks base method.
func (m *MockWarehouse) GetWarehouseByID(arg0 context.Context, arg1 uuid.UUID) (*entity.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarehouseByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarehouseByID indicates an expected call of GetWarehouseByID.
func (mr *MockWarehouseMockRecorder) GetWarehouseByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarehouseByID", reflect.TypeOf((*MockWarehouse)(nil).GetWarehouseByID), arg0, arg1)
}

// UpdateWarehouse mocks base method.
func (m *MockWarehouse) UpdateWarehouse(arg0 context.Context, arg1 *entity.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWarehouse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWarehouse indicates an expected call of UpdateWarehouse.
func (mr *MockWarehouseMockRecorder) UpdateWarehouse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWarehouse", reflect.TypeOf((*MockWarehouse)(nil).UpdateWarehouse), arg0, arg1)
}

// MockWarehouseProduct is a mock of WarehouseProduct interface.
type MockWarehouseProduct struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseProductMockRecorder
	isgomock struct{}
}

// MockWarehouseProductMockRecorder is the mock recorder for MockWarehouseProduct.
type MockWarehouseProductMockRecorder struct {
	mock *MockWarehouseProduct
}

// NewMockWarehouseProduct creates a new mock instance.
func NewMockWarehouseProduct(ctrl *gomock.Controller) *MockWarehouseProduct {
	mock := &MockWarehouseProduct{ctrl: ctrl}
	mock.recorder = &MockWarehouseProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouseProduct) EXPECT() *MockWarehouseProductMockRecorder {
	return m.recorder
}

// CreateWarehouseProduct mocks base method.
func (m *MockWarehouseProduct) CreateWarehouseProduct(arg0 context.Context, arg1 *entity.WarehouseProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWarehouseProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWarehouseProduct indicates an expected call of CreateWarehouseProduct.
func (mr *MockWarehouseProductMockRecorder) CreateWarehouseProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWarehouseProduct", reflect.TypeOf((*MockWarehouseProduct)(nil).CreateWarehouseProduct), arg0, arg1)
}

// GetAllWarehouseProducts mocks base method.
func (m *MockWarehouseProduct) GetAllWarehouseProducts(arg0 context.Context) ([]*entity.WarehouseProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWarehouseProducts", arg0)
	ret0, _ := ret[0].([]*entity.WarehouseProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWarehouseProducts indicates an expected call of GetAllWarehouseProducts.
func (mr *MockWarehouseProductMockRecorder) GetAllWarehouseProducts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWarehouseProducts", reflect.TypeOf((*MockWarehouseProduct)(nil).GetAllWarehouseProducts), arg0)
}

// GetNearestWarehouseZipCodeByProductID mocks base method.
func (m *MockWarehouseProduct) GetNearestWarehouseZipCodeByProductID(arg0 context.Context, arg1 string, arg2 uuid.UUID) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearestWarehouseZipCodeByProductID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearestWarehouseZipCodeByProductID indicates an expected call of GetNearestWarehouseZipCodeByProductID.
func (mr *MockWarehouseProductMockRecorder) GetNearestWarehouseZipCodeByProductID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearestWarehouseZipCodeByProductID", reflect.TypeOf((*MockWarehouseProduct)(nil).GetNearestWarehouseZipCodeByProductID), arg0, arg1, arg2)
}

// GetWarehouseProductByProductID mocks base method.
func (m *MockWarehouseProduct) GetWarehouseProductByProductID(arg0 context.Context, arg1 uuid.UUID) ([]*entity.WarehouseProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarehouseProductByProductID", arg0, arg1)
	ret0, _ := ret[0].([]*entity.WarehouseProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarehouseProductByProductID indicates an expected call of GetWarehouseProductByProductID.
func (mr *MockWarehouseProductMockRecorder) GetWarehouseProductByProductID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarehouseProductByProductID", reflect.TypeOf((*MockWarehouseProduct)(nil).GetWarehouseProductByProductID), arg0, arg1)
}

// GetWarehouseProductByProductIDAndWarehouseID mocks base method.
func (m *MockWarehouseProduct) GetWarehouseProductByProductIDAndWarehouseID(arg0 context.Context, arg1, arg2 uuid.UUID) (*entity.WarehouseProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarehouseProductByProductIDAndWarehouseID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.WarehouseProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarehouseProductByProductIDAndWarehouseID indicates an expected call of GetWarehouseProductByProductIDAndWarehouseID.
func (mr *MockWarehouseProductMockRecorder) GetWarehouseProductByProductIDAndWarehouseID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarehouseProductByProductIDAndWarehouseID", reflect.TypeOf((*MockWarehouseProduct)(nil).GetWarehouseProductByProductIDAndWarehouseID), arg0, arg1, arg2)
}

// GetWarehouseProductByWarehouseID mocks base method.
func (m *MockWarehouseProduct) GetWarehouseProductByWarehouseID(arg0 context.Context, arg1 uuid.UUID) ([]*entity.WarehouseProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarehouseProductByWarehouseID", arg0, arg1)
	ret0, _ := ret[0].([]*entity.WarehouseProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarehouseProductByWarehouseID indicates an expected call of GetWarehouseProductByWarehouseID.
func (mr *MockWarehouseProductMockRecorder) GetWarehouseProductByWarehouseID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarehouseProductByWarehouseID", reflect.TypeOf((*MockWarehouseProduct)(nil).GetWarehouseProductByWarehouseID), arg0, arg1)
}

// UpdateWarehouseProduct mocks base method.
func (m *MockWarehouseProduct) UpdateWarehouseProduct(arg0 context.Context, arg1 *entity.WarehouseProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWarehouseProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWarehouseProduct indicates an expected call of UpdateWarehouseProduct.
func (mr *MockWarehouseProductMockRecorder) UpdateWarehouseProduct(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWarehouseProduct", reflect.TypeOf((*MockWarehouseProduct)(nil).UpdateWarehouseProduct), arg0, arg1)
}

// UpdateWarehouseProductQuantity mocks base method.
func (m *MockWarehouseProduct) UpdateWarehouseProductQuantity(arg0 context.Context, arg1 *entity.WarehouseProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWarehouseProductQuantity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWarehouseProductQuantity indicates an expected call of UpdateWarehouseProductQuantity.
func (mr *MockWarehouseProductMockRecorder) UpdateWarehouseProductQuantity(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWarehouseProductQuantity", reflect.TypeOf((*MockWarehouseProduct)(nil).UpdateWarehouseProductQuantity), arg0, arg1)
}

// MockStockMovement is a mock of StockMovement interface.
type MockStockMovement struct {
	ctrl     *gomock.Controller
	recorder *MockStockMovementMockRecorder
	isgomock struct{}
}

// MockStockMovementMockRecorder is the mock recorder for MockStockMovement.
type MockStockMovementMockRecorder struct {
	mock *MockStockMovement
}

// NewMockStockMovement creates a new mock instance.
func NewMockStockMovement(ctrl *gomock.Controller) *MockStockMovement {
	mock := &MockStockMovement{ctrl: ctrl}
	mock.recorder = &MockStockMovementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStockMovement) EXPECT() *MockStockMovementMockRecorder {
	return m.recorder
}

// GetAllStockMovements mocks base method.
func (m *MockStockMovement) GetAllStockMovements(arg0 context.Context) ([]*entity.StockMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStockMovements", arg0)
	ret0, _ := ret[0].([]*entity.StockMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStockMovements indicates an expected call of GetAllStockMovements.
func (mr *MockStockMovementMockRecorder) GetAllStockMovements(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStockMovements", reflect.TypeOf((*MockStockMovement)(nil).GetAllStockMovements), arg0)
}

// GetStockMovementsByDestinationID mocks base method.
func (m *MockStockMovement) GetStockMovementsByDestinationID(arg0 context.Context, arg1 uuid.UUID) ([]*entity.StockMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockMovementsByDestinationID", arg0, arg1)
	ret0, _ := ret[0].([]*entity.StockMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockMovementsByDestinationID indicates an expected call of GetStockMovementsByDestinationID.
func (mr *MockStockMovementMockRecorder) GetStockMovementsByDestinationID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockMovementsByDestinationID", reflect.TypeOf((*MockStockMovement)(nil).GetStockMovementsByDestinationID), arg0, arg1)
}

// GetStockMovementsByProductID mocks base method.
func (m *MockStockMovement) GetStockMovementsByProductID(arg0 context.Context, arg1 uuid.UUID) ([]*entity.StockMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockMovementsByProductID", arg0, arg1)
	ret0, _ := ret[0].([]*entity.StockMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockMovementsByProductID indicates an expected call of GetStockMovementsByProductID.
func (mr *MockStockMovementMockRecorder) GetStockMovementsByProductID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockMovementsByProductID", reflect.TypeOf((*MockStockMovement)(nil).GetStockMovementsByProductID), arg0, arg1)
}

// GetStockMovementsBySourceID mocks base method.
func (m *MockStockMovement) GetStockMovementsBySourceID(arg0 context.Context, arg1 uuid.UUID) ([]*entity.StockMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockMovementsBySourceID", arg0, arg1)
	ret0, _ := ret[0].([]*entity.StockMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockMovementsBySourceID indicates an expected call of GetStockMovementsBySourceID.
func (mr *MockStockMovementMockRecorder) GetStockMovementsBySourceID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockMovementsBySourceID", reflect.TypeOf((*MockStockMovement)(nil).GetStockMovementsBySourceID), arg0, arg1)
}

// MockTransactionProduct is a mock of TransactionProduct interface.
type MockTransactionProduct struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionProductMockRecorder
	isgomock struct{}
}

// MockTransactionProductMockRecorder is the mock recorder for MockTransactionProduct.
type MockTransactionProductMockRecorder struct {
	mock *MockTransactionProduct
}

// NewMockTransactionProduct creates a new mock instance.
func NewMockTransactionProduct(ctrl *gomock.Controller) *MockTransactionProduct {
	mock := &MockTransactionProduct{ctrl: ctrl}
	mock.recorder = &MockTransactionProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionProduct) EXPECT() *MockTransactionProductMockRecorder {
	return m.recorder
}

// MoveIn mocks base method.
func (m *MockTransactionProduct) MoveIn(arg0 context.Context, arg1 *entity.StockMovement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveIn", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveIn indicates an expected call of MoveIn.
func (mr *MockTransactionProductMockRecorder) MoveIn(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveIn", reflect.TypeOf((*MockTransactionProduct)(nil).MoveIn), arg0, arg1)
}

// MoveOut mocks base method.
func (m *MockTransactionProduct) MoveOut(arg0 context.Context, arg1 []*entity.StockMovement, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveOut", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveOut indicates an expected call of MoveOut.
func (mr *MockTransactionProductMockRecorder) MoveOut(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveOut", reflect.TypeOf((*MockTransactionProduct)(nil).MoveOut), arg0, arg1, arg2)
}
